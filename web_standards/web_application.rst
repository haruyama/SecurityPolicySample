Webアプリケーション開発の標準
===================================

概要
---------------------------

Webアプリケーションには, 正しく実装しなければ個人情報の流出などの重大な事件を起こすリスクがある. サービスの開発者は, 注意深くWebアプリケーションを実装しなければならない.


「安全なウェブサイトの作り方」への準拠
--------------------------------------------------------------------

サービスの開発者は, `情報処理推進機構：情報セキュリティ：脆弱性対策：安全なウェブサイトの作り方 <http://www.ipa.go.jp/security/vuln/websecurity.html>`_ に準拠してサービスを実装しなければならない.

ただし, 以下で補足する事項や他の標準によって規定されている事項は除く.

「安全なウェブサイトの作り方」への補足事項
--------------------------------------------------------------------

以下では,  `安全なウェブサイトの作り方 <http://www.ipa.go.jp/security/vuln/websecurity.html>`_ に対する補足を記述する.

1.1 SQLインジェクション
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* サービスの開発者は, 言語やフレームワークで用意されているバインド機構が安全であるか確認しなければならない.

1.4 セッション管理の不備
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* サービスの開発者は, 言語やフレームワークで用意されているセッション機構が安全であるか確認しなければならない.
  
  * セッションIDに十分エントロピーが含まれているか
  * セッションの終了時にセッション情報がサービス側にもユーザ側にも残らないか
  * セッション情報が格納されるのはどこか. 格納先でどのようなリスクがあるか.

    * セッション情報がDBに格納されるのであれば, 個人情報などを格納するのを避けなければならない.

* サービスの開発者は, 個人情報を閲覧/編集する画面などにsecure属性のないセッションIDだけでアクセスできないように実装しなければならない.

1.5 クロスサイト・スクリプティング
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
XSS対策まとめ
################################################

サービスの開発者は, クロスサイト・スクリプティング防止のために以下を行なわなければならない.

* HTTPからの入力のエンコーディングをチェック/変換しなければならない
* HTML出力時にエンコーディングを意識してHTMLエスケープしなければならない
* a要素のhref属性やimg/iframe要素のsrc属性などにURLを出力する際は, http, httpsスキーマのみ許可しなければならない. もしくは, スキーマを指定しない形式(「//」で開始)を利用しなければならない.
* HTTPヘッダで正しいContent-Type, Charsetを指定しなければならない
* JavaScript, CSSを動的に生成してはならない. JavaScript, CSSのURLを動的に変更する場合は, URLやその一部をホワイトリストでチェックしなければならない.


JavaScript利用時の注意
################################################

TODO: JavaScriptの手順に分離

* サービスの開発者は, 「3) <script>..</script> 要素の内容を動的に生成しないように」しなければならない. script要素の内部で動的な情報を取り扱いたい場合には, 画面に表れないHTMLの要素を利用する.

  * 標準的には, input要素(type="hidden")のvalue属性値に動的な情報を定義して(HTMLエスケープは行なうこと)スクリプトからDOM経由で参照する.

* サービスの開発者は, JavaScriptのdocument.write(), document.writeln()関数や, innerHTML, outerHTMLプロパティ, JQueryの.html()関数などを用いて動的な情報を出力することを避ける必要がある. これらの方法は指定した値のHTMLエスケープを行わない. これらの方法を利用しなければならない場合は, 適切なHTMLエスケープを行なわなければならない. もしくは, 適切にHTMLエスケープを行なうテンプレートエンジンを利用しなければならない.

参考: `escapeHTML の実装 3 パターン (ベンチマーク付き) - (new Hatena).blog() <http://d.hatena.ne.jp/reinyannyan/20060711/p1>`_


1.6 CSRF(クロスサイト・リクエスト・フォージェリ）
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* サービスの開発者は, CSRF対策用の秘密情報としてセッションIDを利用する必要がある. ただし, フレームワークなどで用意されている方法があればそれを利用してもよい.

  * フレームワークが利用する秘密情報に十分なエントロピーが含まれているか確認すること.
  
* サービスの開発者は, ログイン/ログアウト機能でもCSRF対策を行なわなければならない. 理由は, `ログイン機能へのCSRFによるセッション固定 - 知らないけどきっとそう。 <http://d.hatena.ne.jp/asannou/20100122>`_ を参照.


2.3 ネットワーク盗聴への対策
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
* サービスの開発者は, 重要の情報を取り扱うウェブページへの暗号化していない(httpでの)アクセスを禁止しなければならない.

2.4 パスワードの不備
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* 「4) パスワード入力のフォームでは、入力文字列を伏せ字で表示する」とあるが, ユーザビリティを考慮して入力中のパスワードを表示してもよい.


Webアプリケーションセキュリティチェックシート
--------------------------------------------------------------------

(ECナビ固有の情報のため削除)

その他の遵守事項
--------------------------------------------------------------------

利用者の退会の対応
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

サービスは, 利用者の退会が可能でなければならない. サービスの開発者は, 退会機能を用意する必要がある. 退会機能を用意することが難しい場合には, メールなどによるお問合せでの退会を受けつける必要がある.

サービスは, 運用上退会後も一定期間情報の保持が必要な場合を除き利用者の退会直後に機密情報を削除しなければならない. 退会後に一定期間の情報の保持が必要な場合は, 期間終了後に機密情報を削除しなければならない.

機密情報の削除については,  
:ref:`web-standard-cryptograpy` 
の
:ref:`secure-remove`
も参照すること

利用者へのメールでの連絡
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

機密情報の記述の禁止
#########################################

サービスは, メールに利用者の個人情報(住所, 電話番号など)を記述してはならない. ただし, BtoBサービスなどで利用者の個人情報が公開情報であることが期待される場合は除く.

メールのサンプルの表示
##############################################################

サービスは, 利用者に定期的に送られるメールについて具体的な内容とおおまかな送信日時をサイトに明示したほうがよい.

ログイン履歴の利用者への表示
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

機密情報を扱うサービスは, ログイン履歴を利用者が閲覧可能なことを推奨する. ログイン履歴が閲覧可能なことで, 侵入の抑止力となったり事故の早期発見につながるといった効果が期待できる.

https
####################################

TODO: 文章が適当

https で保護されたページでの画像・CSS・JavaScript
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
サービスの開発者は, https で保護されたページでは画像・CSS・JavaScriptなどもhttpではなくhttpsでアクセスするようにしなければならない. ただし, そのページがhttp/https どちらでもアクセスできかつ何ら機密情報などを含まないものであれば, http でのアクセスを許してもよい.

httpページにhttpsページの(i)frameの禁止
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

httpのページにhttpsのページをframeやiframeで出力してはならない.

X-Content-Type-Options: nosniff の付与
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

HTTPレスポンスヘッダで 

* X-Content-Type-Options: nosniff 

を出力すると, Internet Explorer 8以降でコンテンツの内容からファイルタイプを決定しないように強制できる. すべての動的コンテンツのレスポンスヘッダで出力することを推奨する.

* `X-Content-Type-Options: nosniff つかわないやつは死ねばいいのに! - 葉っぱ日記 <http://d.hatena.ne.jp/hasegawayosuke/20110106/p1>`_

* `1分でわかる「X-ナントカ」HTTPレスポンスヘッダ - 葉っぱ日記 <http://d.hatena.ne.jp/hasegawayosuke/20110107/p1>`_

* `X-Content-Type-Options: nosniffのつけ方 | へぼい日記 <http://blog.everqueue.com/chiba/2011/01/06/484/>`_ 
